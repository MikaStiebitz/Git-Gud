import type { StageType, LevelType } from "~/types";

export class LevelManager {
    private stages: Record<string, StageType>;

    constructor() {
        this.stages = {
            Intro: {
                id: "intro",
                name: "Einf√ºhrung in Git",
                description: "Lerne die Grundlagen von Git",
                icon: "üöÄ",
                levels: {
                    1: {
                        id: 1,
                        name: "Git initialisieren",
                        description: "Erstelle ein neues Git-Repository",
                        objectives: ["Initialisiere ein neues Git-Repository"],
                        hints: ["Verwende den Befehl git init", "Dies erstellt ein verstecktes .git Verzeichnis"],
                        requirements: [
                            {
                                command: "git init",
                                description: "Initialisiere ein Git-Repository",
                                successMessage: "Gut gemacht! Du hast ein Git-Repository erstellt.",
                            },
                        ],
                        // Neu: Story-Kontext f√ºr jedes Level
                        story: {
                            title: "Willkommen im Team",
                            narrative: `Herzlich willkommen in deinem neuen Job als Entwickler bei TechStart! Ich bin Alex, dein Team-Lead.

              Es ist dein erster Tag und wir wollen dir helfen, schnell produktiv zu werden. Wir nutzen Git f√ºr unsere Versionskontrolle - damit verfolgen wir √Ñnderungen im Code und arbeiten im Team zusammen.

              Als erstes musst du ein neues Repository f√ºr dein Onboarding-Projekt anlegen. Daf√ºr nutzen wir den Befehl 'git init'.`,
                            realWorldContext:
                                "In echten Entwicklerteams ist Git unverzichtbar. Es ist das erste Tool, das du bei einem neuen Projekt einrichtest.",
                            taskIntroduction: "Lass uns ein neues Repository f√ºr dein Projekt erstellen.",
                        },
                    },
                    2: {
                        id: 2,
                        name: "Repository Status",
                        description: "√úberpr√ºfe den Status deines Repositories",
                        objectives: ["Zeige den Status deines Git-Repositories an"],
                        hints: [
                            "Verwende den Befehl git status",
                            "Dieser Befehl zeigt dir den aktuellen Status deines Repositories",
                        ],
                        requirements: [
                            {
                                command: "git status",
                                description: "Zeige den Status des Repositories",
                                successMessage: "Perfekt! Du kannst nun den Status deines Repositories sehen.",
                            },
                        ],
                        story: {
                            title: "Was ist los in deinem Repo?",
                            narrative: `Gro√üartig! Du hast dein erstes Git-Repository erstellt. Das versteckte .git-Verzeichnis enth√§lt nun alle Informationen, die Git braucht.

              Alex schaut vorbei: "Super! Als n√§chstes solltest du dir anschauen, was in deinem Repository passiert. Mit 'git status' kannst du jederzeit den aktuellen Zustand √ºberpr√ºfen."`,
                            realWorldContext:
                                "Entwickler f√ºhren 'git status' mehrmals t√§glich aus, um zu sehen, welche Dateien ge√§ndert wurden und welche f√ºr den n√§chsten Commit bereit sind.",
                            taskIntroduction: "√úberpr√ºfe den Status deines Repositories mit git status.",
                        },
                    },
                },
            },
            Files: {
                id: "files",
                name: "Dateioperationen",
                description: "Lerne, wie du Dateien mit Git verwaltest",
                icon: "üìÅ",
                levels: {
                    1: {
                        id: 1,
                        name: "√Ñnderungen stagen",
                        description: "F√ºge Dateien zur Staging-Area hinzu",
                        objectives: ["F√ºge alle Dateien zur Staging-Area hinzu"],
                        hints: [
                            "Verwende den Befehl git add .",
                            "Der Punkt steht f√ºr 'alle Dateien im aktuellen Verzeichnis'",
                        ],
                        requirements: [
                            {
                                command: "git add",
                                requiresArgs: ["."],
                                description: "F√ºge alle Dateien zum Staging-Bereich hinzu",
                                successMessage: "Gro√üartig! Du hast alle Dateien zur Staging-Area hinzugef√ºgt.",
                            },
                        ],
                        story: {
                            title: "Code-√Ñnderungen vorbereiten",
                            narrative: `"Hey!" ruft Sarah, deine Kollegin, "ich sehe, du hast schon mit Git angefangen. Als n√§chstes solltest du lernen, wie man √Ñnderungen staged."

              Sie erkl√§rt: "Wenn du Dateien √§nderst, musst du Git explizit sagen, welche √Ñnderungen in den n√§chsten Commit aufgenommen werden sollen. Das nennt man 'Staging' und funktioniert mit 'git add'."`,
                            realWorldContext:
                                "Das Staging-Konzept ist ein m√§chtiges Feature von Git. Es erlaubt dir, nur ausgew√§hlte √Ñnderungen zu committen, w√§hrend andere noch in Bearbeitung bleiben k√∂nnen.",
                            taskIntroduction: "F√ºge alle Dateien zur Staging-Area hinzu mit git add .",
                        },
                    },
                    2: {
                        id: 2,
                        name: "√Ñnderungen committen",
                        description: "Erstelle einen Commit mit deinen √Ñnderungen",
                        objectives: ["Erstelle einen Commit mit einer Nachricht"],
                        hints: [
                            "Verwende den Befehl git commit -m 'Deine Nachricht'",
                            "Die Nachricht sollte die √Ñnderungen beschreiben",
                        ],
                        requirements: [
                            {
                                command: "git commit",
                                requiresArgs: ["-m"],
                                description: "Erstelle einen Commit mit einer Nachricht",
                                successMessage: "Ausgezeichnet! Du hast erfolgreich einen Commit erstellt.",
                            },
                        ],
                        story: {
                            title: "Dein erster Commit",
                            narrative: `"Super gemacht!" sagt Alex, als er deine Fortschritte sieht. "Du hast √Ñnderungen zur Staging-Area hinzugef√ºgt. Jetzt ist es Zeit f√ºr deinen ersten Commit."

              Er erkl√§rt: "Ein Commit ist wie ein Snapshot deines Projekts zu einem bestimmten Zeitpunkt. Jeder Commit braucht eine Nachricht, die beschreibt, was ge√§ndert wurde. Das ist wichtig f√ºr die Nachvollziehbarkeit."`,
                            realWorldContext:
                                "Gute Commit-Nachrichten sind in Entwicklerteams extrem wichtig. Sie helfen allen zu verstehen, warum eine √Ñnderung gemacht wurde, nicht nur was ge√§ndert wurde.",
                            taskIntroduction: "Erstelle deinen ersten Commit mit einer aussagekr√§ftigen Nachricht.",
                        },
                    },
                },
            },
            Branches: {
                id: "branches",
                name: "Arbeiten mit Branches",
                description: "Lerne, wie du mit Branches arbeitest",
                icon: "üåø",
                levels: {
                    1: {
                        id: 1,
                        name: "Branches anzeigen",
                        description: "Zeige alle Branches in deinem Repository",
                        objectives: ["Zeige alle vorhandenen Branches an"],
                        hints: ["Verwende den Befehl git branch", "Dies zeigt dir alle lokalen Branches an"],
                        requirements: [
                            {
                                command: "git branch",
                                description: "Zeige alle Branches an",
                                successMessage: "Sehr gut! Du kannst nun alle Branches in deinem Repository sehen.",
                            },
                        ],
                        story: {
                            title: "Verzweigungen im Code",
                            narrative: `"Zeit f√ºr etwas Fortgeschritteneres", sagt Alex und zeichnet einen Baum mit Zweigen auf ein Whiteboard. "Diese Zweige sind wie Git-Branches. Sie erlauben dir, an verschiedenen Versionen deines Codes gleichzeitig zu arbeiten."

              Er erkl√§rt weiter: "Derzeit arbeitest du auf dem 'main'-Branch. Lass uns zuerst √ºberpr√ºfen, welche Branches wir haben."`,
                            realWorldContext:
                                "Branches sind ein fundamentales Konzept in Git. Sie erm√∂glichen parallele Entwicklung, Feature-Isolation und experimentelles Arbeiten ohne den Hauptcode zu beeintr√§chtigen.",
                            taskIntroduction: "Zeige dir alle vorhandenen Branches mit git branch an.",
                        },
                    },
                    2: {
                        id: 2,
                        name: "Branch erstellen",
                        description: "Erstelle einen neuen Branch und wechsle zu ihm",
                        objectives: ["Erstelle einen neuen Branch namens 'feature' und wechsle zu ihm"],
                        hints: [
                            "Verwende den Befehl git checkout -b feature",
                            "Dies erstellt einen neuen Branch und wechselt gleichzeitig zu ihm",
                        ],
                        requirements: [
                            {
                                command: "git checkout",
                                requiresArgs: ["-b"],
                                description: "Erstelle einen neuen Branch und wechsle zu ihm",
                                successMessage:
                                    "Hervorragend! Du hast einen neuen Branch erstellt und zu ihm gewechselt.",
                            },
                        ],
                        story: {
                            title: "Neue Feature-Entwicklung",
                            narrative: `"Perfekt! Jetzt wollen wir ein neues Feature implementieren", sagt Alex. "Daf√ºr erstellen wir einen neuen Branch namens 'feature', damit unsere √Ñnderungen den Hauptcode nicht beeinflussen."

              Er zeigt dir, wie man gleichzeitig einen Branch erstellt und zu ihm wechselt: "Mit 'git checkout -b' kannst du beides in einem Schritt erledigen."`,
                            realWorldContext:
                                "In professionellen Entwicklungsteams arbeitet man fast nie direkt im main-Branch. Stattdessen erstellt man Feature-Branches f√ºr neue Funktionen, um den Hauptcode stabil zu halten.",
                            taskIntroduction: "Erstelle einen neuen Branch namens 'feature' und wechsle zu ihm.",
                        },
                    },
                },
            },
            Merge: {
                id: "merge",
                name: "Branches zusammenf√ºhren",
                description: "Lerne, wie du Branches zusammenf√ºhrst",
                icon: "üîÄ",
                levels: {
                    1: {
                        id: 1,
                        name: "Branches mergen",
                        description: "F√ºhre einen Branch in den aktuellen Branch zusammen",
                        objectives: ["F√ºhre den 'feature' Branch in den 'main' Branch zusammen"],
                        hints: [
                            "Verwende den Befehl git merge feature",
                            "Dies f√ºhrt den feature-Branch in deinen aktuellen Branch zusammen",
                        ],
                        requirements: [
                            {
                                command: "git merge",
                                requiresArgs: ["any"],
                                description: "F√ºhre einen Branch zusammen",
                                successMessage: "Ausgezeichnet! Du hast erfolgreich einen Branch zusammengef√ºhrt.",
                            },
                        ],
                        story: {
                            title: "Code-Integration",
                            narrative: `"Super! Dein Feature ist fertig und getestet", sagt Alex. "Jetzt ist es Zeit, diese √Ñnderungen zur√ºck in den Hauptcode zu integrieren."

              Er erkl√§rt: "Wechsle zuerst zum main-Branch mit 'git checkout main' und f√ºhre dann den feature-Branch mit 'git merge feature' zusammen."`,
                            realWorldContext:
                                "Das Zusammenf√ºhren (Merging) ist ein kritischer Teil des Git-Workflows. In gr√∂√üeren Teams wird dies oft durch Pull Requests und Code Reviews formalisiert.",
                            taskIntroduction: "F√ºhre den 'feature'-Branch in den 'main'-Branch zusammen.",
                        },
                    },
                },
            },
        };
    }

    // Get all stages
    public getAllStages(): Record<string, StageType> {
        return { ...this.stages };
    }

    // Get a specific stage
    public getStage(stageId: string): StageType | null {
        return this.stages[stageId] ?? null;
    }

    // Get a specific level within a stage
    public getLevel(stageId: string, levelId: number): LevelType | null {
        return this.stages[stageId]?.levels[levelId] ?? null;
    }

    // Check if a command completes a level requirement
    public checkLevelCompletion(stageId: string, levelId: number, command: string, args: string[]): boolean {
        console.log(`Checking level completion for stage: ${stageId}, level: ${levelId}`);
        console.log(`Command: ${command}, args:`, args);

        const level = this.getLevel(stageId, levelId);
        if (!level) {
            console.log("Level not found");
            return false;
        }

        // Spezialfall f√ºr Git-Befehle
        if (command === "git") {
            const gitCommand = args[0]; // z.B. "init", "status", etc.
            const gitArgs = args.slice(1); // Die restlichen Parameter

            console.log(`Git command: ${gitCommand}, Git args:`, gitArgs);

            for (const requirement of level.requirements) {
                console.log("Checking requirement:", requirement);

                // √úberpr√ºfe, ob dies der richtige Git-Befehl ist
                if (
                    requirement.command === `git ${gitCommand}` ||
                    requirement.command === command ||
                    requirement.command === gitCommand
                ) {
                    // Dieser Fall ist wichtig f√ºr "git init" etc.

                    console.log("Command matches!");

                    // √úberpr√ºfe die Argumente, falls erforderlich
                    if (requirement.requiresArgs) {
                        const allArgsMatch = requirement.requiresArgs.every(reqArg => {
                            if (reqArg === "any") {
                                return gitArgs.length > 0;
                            }
                            return gitArgs.includes(reqArg);
                        });

                        console.log("Args required:", requirement.requiresArgs);
                        console.log("Args match:", allArgsMatch);

                        if (!allArgsMatch) return false;
                    }

                    return true;
                }
            }
        } else if (command === "next") {
            // Spezieller Fall f√ºr den "next"-Befehl
            return false; // Der "next"-Befehl schlie√üt kein Level ab, sondern navigiert zum n√§chsten
        } else {
            // Nicht-Git-Befehle
            for (const requirement of level.requirements) {
                if (requirement.command === command) {
                    if (requirement.requiresArgs) {
                        const allArgsMatch = requirement.requiresArgs.every(reqArg => {
                            if (reqArg === "any") {
                                return args.length > 0;
                            }
                            return args.includes(reqArg);
                        });

                        if (!allArgsMatch) return false;
                    }

                    return true;
                }
            }
        }

        return false;
    }

    // Get next level information
    public getNextLevel(stageId: string, levelId: number): { stageId: string | undefined; levelId: number } {
        const stage = this.getStage(stageId);
        if (!stage) return { stageId, levelId };

        const levelIds = Object.keys(stage.levels).map(id => parseInt(id));
        const maxLevelId = Math.max(...levelIds);

        if (levelId < maxLevelId) {
            // Move to the next level in the same stage
            return { stageId, levelId: levelId + 1 };
        } else {
            // Move to the first level of the next stage
            const stageIds = Object.keys(this.stages);
            const currentStageIndex = stageIds.indexOf(stageId);

            if (currentStageIndex < stageIds.length - 1) {
                const nextStageId = stageIds[currentStageIndex + 1];
                return { stageId: nextStageId, levelId: 1 };
            }
        }

        // No next level - game completed
        return { stageId, levelId };
    }

    // Add a custom level (for extensibility)
    public addCustomLevel(stageId: string, level: LevelType): boolean {
        const stage = this.getStage(stageId);
        if (!stage) return false;

        stage.levels[level.id] = level;
        return true;
    }
}
